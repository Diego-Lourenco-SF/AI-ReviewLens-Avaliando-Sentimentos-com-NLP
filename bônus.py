# -*- coding: utf-8 -*-
"""Bônus.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iBhkCBlrU4wKa5-S47K2uNt1FDFI5QVc
"""

import os
import openai
import pandas as pd
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

# Configurar a chave da API diretamente
openai.api_key = "chave-suprimida"  # Substituir por sua chave válida

# Carregar o dataset
file_path = "/content/drive/MyDrive/Colab Notebooks/Projeto Final De PNL 2024/Reviews.csv.zip"

# Ler o arquivo CSV
print("Carregando os dados...")
df = pd.read_csv(file_path, compression='zip')
print("Dados carregados com sucesso!")

# Selecionar colunas de interesse
print("Selecionando colunas de interesse...")
df = df[["Score", "Text"]].dropna()

# Converter "Score" em categorias de sentimento
def map_score_to_sentiment(score):
    if score >= 4:
        return 'positivo'
    elif score == 3:
        return 'neutro'
    else:
        return 'negativo'

df['Sentiment'] = df['Score'].apply(map_score_to_sentiment)

# Amostrar 500 linhas para o teste
print("Limitando a 500 amostras...")
df_sample = df.sample(n=500, random_state=42)
X_test_sample = df_sample['Text'].tolist()
y_test_sample = df_sample['Sentiment'].tolist()

# Exemplos para o modelo GPT
examples = [
    {"text": "O produto é excelente, superou minhas expectativas.", "sentiment": "positivo"},
    {"text": "Não gostei do material, parece ser frágil.", "sentiment": "negativo"},
    {"text": "Razoável pelo preço que paguei.", "sentiment": "neutro"}
]

# Criar prompt base para o modelo GPT
def create_prompt(text, examples):
    prompt = "Classifique o sentimento das seguintes avaliações em 'positivo', 'neutro' ou 'negativo'.\n\n"
    for ex in examples:
        prompt += f"Avaliação: {ex['text']}\nSentimento: {ex['sentiment']}\n\n"
    prompt += f"Avaliação: {text}\nSentimento:"
    return prompt

# Função para classificar usando o modelo GPT (Chat API)
def classify_sentiment(text, examples):
    prompt = create_prompt(text, examples)
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",  # ou usar "gpt-4"
            messages=[
                {"role": "system", "content": "Você é um assistente de classificação de texto."},
                {"role": "user", "content": prompt}
            ]
        )
        sentiment = response['choices'][0]['message']['content'].strip().lower()
        if sentiment not in ["positivo", "neutro", "negativo"]:
            return "neutro"  # Valor padrão para saídas inesperadas
        return sentiment
    except Exception as e:
        print(f"Erro ao classificar: {e}")
        return "neutro"  # Valor padrão em caso de erro


# Classificar as amostras
print("Classificando as amostras...")
predictions = [classify_sentiment(text, examples) for text in X_test_sample]

# Avaliar o modelo
print("Avaliando o modelo...")
accuracy = accuracy_score(y_test_sample, predictions)
print(f"\nAcurácia no conjunto de teste: {accuracy:.4f}\n")
print("Relatório de Classificação:")
print(classification_report(y_test_sample, predictions, digits=4))

# Matriz de confusão
print("Gerando matriz de confusão...")
conf_matrix = confusion_matrix(y_test_sample, predictions, labels=["negativo", "neutro", "positivo"])
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=["negativo", "neutro", "positivo"], yticklabels=["negativo", "neutro", "positivo"])
plt.title("Matriz de Confusão - In-Context Learning com LLM")
plt.xlabel("Predito")
plt.ylabel("Verdadeiro")
plt.show()

print(df_sample.head())  # Exibe as primeiras linhas das 500 amostras
print(df_sample['Sentiment'].value_counts())  # Mostra a distribuição das classes